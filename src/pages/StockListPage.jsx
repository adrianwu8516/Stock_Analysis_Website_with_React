import { Spin, Table, Tooltip } from "antd";
import Layout, { Content } from "antd/lib/layout/layout";
import { Link, useLocation, useParams } from "react-router-dom";
import NoData from "../components/NoData";
import NotFound from "../components/NotFound";
import SiteBreadcrumb from "../components/SiteBreadcrumb";
import SiteSider from "../components/SiteSider";
import { useStockListState } from "../hook/stockList";
const StockListPage = ({ module_type }) => {
  const location = useLocation();
  const pathList = location.pathname.split("/");
  const columns = [
    {
      title: "‰ª£Ëôü",
      dataIndex: "symbol",
      fixed: "left",
      width: 100,
      render: (symbol, row) => (
        <>
          <a href={row.url} target="_blank" rel="noopener noreferrer">
            <Tooltip title="ÂâçÂæÄ Webull Á∂≤Á´ô">
              <span>üåê </span>
            </Tooltip>
          </a>
          {symbol}
        </>
      )
    },
    {
      title: "ÂÖ¨Âè∏ÂêçÁ®±",
      dataIndex: "companyName",
      fixed: "left",
      width: 150,
      render: (companyName, row) => (
        <Link
          to={`/${pathList[1]}/${pathList[2]}/${row.symbol.toLowerCase()}`}
          key={`${pathList[2]}/${row.symbol}`}
        >
          <Tooltip title="ÂâçÂæÄË≤°ÂãôË≥áÊñô">{companyName}</Tooltip>
        </Link>
      )
    },
    {
      title: "ËÇ°ÂÉπ",
      dataIndex: "price",
      width: 100,
      sorter: (a, b) => a.price - b.price
    },
    {
      title: "52ÈÄ±È´òÈªû",
      dataIndex: "52weekHigh",
      width: 120,
      render: (number, row) =>
        number / row.price < 1.05 ? (
          <span style={{ backgroundColor: "green", color: "white" }}>
            <Tooltip title="‰ΩçÊñºËøëÂπ¥ÂÖßÈ´òÈªû">{number}</Tooltip>
          </span>
        ) : (
          <span>{number}</span>
        )
    },
    {
      title: "52ÈÄ±‰ΩéÈªû",
      dataIndex: "52weekLow",
      width: 120,
      render: (number, row) =>
        row.price / number < 1.1 ? (
          <span style={{ backgroundColor: "red", color: "white" }}>
            <Tooltip title="‰ΩçÊñºËøëÂπ¥ÂÖß‰ΩéÈªû">{number}</Tooltip>
          </span>
        ) : (
          <span>{number}</span>
        )
    },
    {
      title: "Êº≤Ë∑å",
      dataIndex: "delta",
      width: 80,
      sorter: (a, b) => a.delta - b.delta,
      render: (ratio) =>
        ratio > 0.05 ? (
          <span style={{ backgroundColor: "green", color: "white" }}>
            {Math.round(ratio * 1000) / 10}%
          </span>
        ) : ratio > 0 ? (
          <span style={{ color: "green" }}>
            {Math.round(ratio * 1000) / 10}%
          </span>
        ) : ratio < -0.05 ? (
          <span style={{ backgroundColor: "red", color: "white" }}>
            {Math.round(ratio * 1000) / 10}%
          </span>
        ) : ratio < 0 ? (
          <span style={{ color: "red" }}>{Math.round(ratio * 1000) / 10}%</span>
        ) : (
          <span>{Math.round(ratio * 1000) / 10}%</span>
        )
    },
    {
      title: "Â∏ÇÂÄº(ÂÑÑ)",
      dataIndex: "value",
      width: 120,
      sorter: (a, b) => a.value - b.value,
      render: (value) =>
        value < 20 * Math.pow(10, 8) ? (
          <span style={{ color: "green" }}>
            <Tooltip title="Â∞èÂûãËÇ°ÁöÑË°®ÁèæÔºå‰ª•ÂèäËÆäÂãïÈÄöÂ∏∏ÂÑ™Êñº‰∏≠„ÄÅÂ§ßÂûãËÇ°">
              {Math.round(value / 10000000) / 10}
            </Tooltip>
          </span>
        ) : value > 100 * Math.pow(10, 8) ? (
          <span style={{ color: "red" }}>
            {Math.round(value / 10000000) / 10}
          </span>
        ) : (
          <span style={{ color: "orange" }}>
            <Tooltip title="‰∏≠ÂûãËÇ°ÁöÑË°®ÁèæÔºå‰ª•ÂèäËÆäÂãïÈÄöÂ∏∏ÂÑ™ÊñºÂ§ßÂûãËÇ°">
              {Math.round(value / 10000000) / 10}
            </Tooltip>
          </span>
        )
    },
    {
      title: "PE",
      dataIndex: "TTM",
      width: 80,
      sorter: (a, b) => a["TTM"] - b["TTM"],
      render: (pe) => <span>{Math.round(pe * 10) / 10}</span>
    },
    {
      title: "È†ê‰º∞PE",
      dataIndex: "forwardPe",
      width: 120,
      sorter: (a, b) => a.forwardPe - b.forwardPe,
      render: (forwardPe, row) =>
        row.TTM <= 0 && forwardPe > 0 ? (
          <span style={{ backgroundColor: "green", color: "white" }}>
            <Tooltip title="Áî±ËôßËΩâÁõà">{forwardPe}</Tooltip>
          </span>
        ) : row.TTM >= 0 && forwardPe < 0 ? (
          <span style={{ backgroundColor: "red", color: "white" }}>
            <Tooltip title="Áî±ÁõàËΩâËôß">{forwardPe}</Tooltip>
          </span>
        ) : forwardPe > 0 && forwardPe <= row.TTM ? (
          <span style={{ color: "green" }}>
            <Tooltip title="Âõ†Êî∂Áõä‰∏äÂçáÔºåÊé®Âãï‰º∞ÂÄº‰∏ãÈôç">{forwardPe}</Tooltip>
          </span>
        ) : forwardPe > 0 && forwardPe > row.TTM ? (
          <span style={{ color: "orange" }}>
            <Tooltip title="Âõ†Êî∂Áõä‰∏ãÈôçÔºåÊé®Âãï‰º∞ÂÄº‰∏äÂçá">{forwardPe}</Tooltip>
          </span>
        ) : forwardPe < 0 && forwardPe < row.TTM ? (
          <span style={{ color: "darkorange" }}>
            <Tooltip title="ÈõñÁÑ∂ËôßÊêçÔºå‰ΩÜÊòØÊî∂Áõä‰∏äÂçáÔºåËôßÊêçÊ∏õÂ∞ë">
              {forwardPe}
            </Tooltip>
          </span>
        ) : forwardPe < 0 && forwardPe < row.TTM ? (
          <span style={{ color: "red" }}>
            <Tooltip title="Ë∂äËôßË∂äÂ§ö">{forwardPe}</Tooltip>
          </span>
        ) : (
          <span>{forwardPe}</span>
        )
    },
    {
      title: "PB",
      dataIndex: "pb",
      width: 80,
      sorter: (a, b) => a.pb - b.pb,
      render: (pb) => <span>{Math.round(pb * 10) / 10}</span>
    },
    {
      title: "PS",
      dataIndex: "ps",
      width: 80,
      sorter: (a, b) => a.ps - b.ps,
      render: (ps) => <span>{Math.round(ps * 10) / 10}</span>
    },
    {
      title: "ÂõûË≥ºÁéá",
      dataIndex: "buyback_yield",
      width: 100,
      sorter: (a, b) => a.buyback_yield - b.buyback_yield,
      render: (value) =>
        value != 0 ? (
          value > 0 ? (
            <span style={{ color: "green" }}>
              {Math.round(value * 10) / 10}%
            </span>
          ) : (
            <span style={{ color: "red" }}>{Math.round(value * 10) / 10}%</span>
          )
        ) : (
          <span style={{ color: "lightgray" }}>{value}</span>
        )
    },
    {
      title: "ÊÆñÂà©Áéá",
      dataIndex: "yield",
      width: 100,
      sorter: (a, b) => a.yield - b.yield,
      render: (value) =>
        value != 0 ? (
          <span style={{ color: "green" }}>
            {Math.round(value * 1000) / 10}%
          </span>
        ) : (
          <span style={{ color: "lightgray" }}>
            {Math.round(value * 1000) / 10}
          </span>
        )
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="ÊäïÂÖ•Ë≥áÊú¨Â†±ÈÖ¨Áéá ROIC Ê∏õÊéâÂä†Ê¨äÂπ≥ÂùáË≥áÊú¨ÊàêÊú¨ WACCÔºåÂîØÊúâÂú®ÊäïË≥áÂ†±ÈÖ¨ÁéáÈ´òÊñºË≥áÈáëÊàêÊú¨ÁöÑÊÉÖÊ≥Å‰∏ãÔºåÊâçÊúÉÁî¢ÁîüË∂ÖÈ°çÂ†±ÈÖ¨ÔºåÂâµÈÄ†Âá∫‰∏ÄÂÄãËâØÂ•ΩÁöÑÊ≠£ÂêëÂæ™Áí∞„ÄÇ‰ºÅÊ•≠ÁöÑÊäïÂÖ•Ë≥áÊú¨Â†±ÈÖ¨(ROIC)Â¶ÇÊûúÂ§ßÊñºË≥áÈáëÊàêÊú¨(WACC)ÔºåÂ∞±ËÉΩÂâµÈÄ†Á∂ìÊøüÂ≠∏ÂÆ∂ÊâÄË¨ÇÁöÑË∂ÖÈ°çÂ†±ÈÖ¨(excess return)"
        >
          Ë∂ÖÈ°çÂ†±ÈÖ¨
        </Tooltip>
      ),
      dataIndex: "excessReturn",
      width: 120,
      sorter: (a, b) => a.excessReturn - b.excessReturn,
      render: (value) =>
        value >= 0 ? (
          <span style={{ color: "green" }}>
            {Math.round(value * 100) / 100}%
          </span>
        ) : (
          <span style={{ color: "red" }}>{Math.round(value * 100) / 100}%</span>
        )
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="ROEÁ∞°ÂñÆ‰æÜË™™Â∞±ÊòØÂÖ¨Âè∏Áî®Ëá™ÊúâË≥áÊú¨Ë≥∫Èå¢ÁöÑËÉΩÂäõÔºåÂèçÊáâ‰∫ÜÂÖ¨Âè∏ÈÅãÁî®Ë≥áÊ∫êÁöÑÊïàÁéá„ÄÇÂõ†Ê≠§ÔºåROEÊï∏ÂÄºÊÑàÈ´òÔºåÁç≤Âà©ËÉΩÂäõÊÑà‰Ω≥ÔºåÂÖ¨Âè∏ËÉΩÊúâÊïàÂà©Áî®ËÇ°Êù±Ë≥áÈáëÔºåÊâÄ‰ª•ËÇ°Êù±Â∞±ÂèØËÉΩ‰∫´ÂèóÂà∞ÂÖ¨Âè∏ÊâÄÁµ¶‰∫àÁöÑÁç≤Âà©ÊÑàÂ§ö„ÄÇ‰ΩÜ‰æùÊìöÂÖ¨ÂºèÔºåROEÂèØ‰ª•Èù†ËàâÂÇµ‰æÜÊèêÂçáÔºåÊâÄ‰ª•Âú®Ë≤†ÂÇµÊØî‰æãÈ´òÁöÑÁî¢Ê•≠(Â¶Ç: ÈäÄË°åÊ•≠„ÄÅÈáëÊéßÊ•≠)Ââá‰∏çÈÅ©ÂêàÁî®ROE‰æÜÂà§Êñ∑„ÄÇËã•ÂÖ¨Âè∏ÁöÑROEÈ´òÔºå‰ΩÜROAÂçªÂæà‰ΩéÔºåÈÄô‰ª£Ë°®ÂÖ¨Âè∏‰∏ªË¶ÅÁç≤Âà©Â§öÊòØ‰æÜËá™È´òË≤°ÂãôÊßìÊ°øÔºåÁõ∏Â∞çÁöÑÊäïË≥áÈ¢®Èö™ÊúÉÂõ†Ê≠§ÊèêÈ´ò„ÄÇ"
        >
          ROE
        </Tooltip>
      ),
      dataIndex: "roe",
      width: 100,
      sorter: (a, b) => a.roe - b.roe,
      render: (value) =>
        value > 0 ? (
          value > 15 ? (
            <span style={{ color: "green" }}>{value}%</span>
          ) : (
            <span>{value}%</span>
          )
        ) : (
          <span style={{ color: "red" }}>{value}</span>
        )
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="Ë≥áÁî¢Â†±ÈÖ¨ÁéáË°°Èáè‰ºÅÊ•≠Âà©Áî®Ë≥áÁî¢ÁöÑÁ∂ìÁáüÊïàÁéá„ÄÇ Ë≥áÁî¢Â†±ÈÖ¨ÁéáË∂äÈ´òÔºå‰ª£Ë°®Êï¥È´îË≥áÁî¢Â∏∂ÂõûÁöÑÁç≤Âà©Ë∂äÈ´ò„ÄÇ Ë≥áÁî¢Â†±ÈÖ¨ÁéáË°°ÈáèÁöÑÊ®ôÊ∫ñÔºåÈï∑ÊúüËá≥Â∞ëË¶ÅÊØîÂÆöÂ≠òÂà©Áéá„ÄÅÈï∑ÊúüÂÖ¨ÂÇµÂà©ÁéáÈ´òÁÇ∫‰Ω≥(Á¥Ñ5%)Ôºå Âê¶ÂâáÂêåÊ®£ÁöÑÈå¢ÊãøÂéªË≤∑ÂÆöÂ≠òÊàñÂÇµÂà∏‰∏çÂè™Áç≤Âà©ËºÉÂ•ΩÔºåÂÆâÂÖ®ÊÄßÈÇÑÊõ¥È´ò„ÄÇ Âè¶‰∏ÄÂÄãËßÄÂØüÈáçÈªûÁÇ∫ROAÁöÑËµ∞Âã¢ÔºåROAËµ∞Âã¢Âπ≥Á©©Êàñ‰∏äÂçáÁÇ∫‰Ω≥„ÄÇ"
        >
          ROA
        </Tooltip>
      ),
      dataIndex: "roa",
      width: 100,
      sorter: (a, b) => a.roa - b.roa,
      render: (value) =>
        value > 0 ? (
          value > 5 ? (
            <span style={{ color: "green" }}>{value}%</span>
          ) : (
            <span>{value}%</span>
          )
        ) : (
          <span style={{ color: "red" }}>{value}</span>
        )
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="È°û‰ººÁãπÁæ©ÁöÑROAÔºåÈÄöÂ∏∏ÊòØÊåáË≥áÁî¢‰∏≠ÈáùÂ∞çÊú¨Ê•≠Ë≥áÊú¨ÊîØÂá∫ÁöÑÈÉ®ÂàÜÔºå‰ª£Ë°®ÊØèÊäïÂÖ•‰∏ÄÂ°äÈå¢ÁöÑË≥áÊú¨ÔºåÂèØ‰ª•Ë≥∫ÂæóÂ§öÂ∞ëÂà©ÊΩ§„ÄÇË≥áÁî¢Ë∑üË≥áÊú¨ÊúÄÂ§ßÁöÑÂ∑ÆÂà•Âú®ÔºåË≥áÊú¨ÊòØÂåÖÂê´Âú®Ë≥áÁî¢Ë£°Èù¢ÔºåÊâÄ‰ª•Ë´áË´ñË≥áÊú¨ÊôÇÔºåÂ¶Ç‰ΩïÂ∞çË≥áÊú¨ÂÆöÁæ©ÊâçÊòØÊúÄÈ¶ñË¶ÅÁöÑ‰ªªÂãôÔºåÂõ†ÁÇ∫ÂîØÊúâÂÖàÂÆöÁæ©Ë≥áÊú¨ÊâÄÂê´ÁöÑÈ†ÖÁõÆÔºåÊàëÂÄëÊâçÊúâËæ¶Ê≥ïÂéªÂæóÁü•Ë≥áÊú¨Â†±ÈÖ¨ÁéáÊòØÂª∫Á´ãÂú®ÊäïË≥á‰ªÄÈ∫ºÈù¢Âêë‰∏äÁöÑÂ†±ÈÖ¨Áéá„ÄÇÂ∑¥Ëè≤ÁâπÂÖ∂ÂØ¶Â∞çÊñºË≥áÊú¨Â†±ÈÖ¨ÁéáÊÉÖÊúâÁç®ÈçæÔºåÂõ†ÁÇ∫ROEÈõñÁÑ∂ÂèçÊò†ÂÖ¨Âè∏Ê¥æÊúâÊ≤íÊúâÂ¶•ÂñÑÂà©Áî®ËÇ°Êù±ÂÄëÁöÑÈáëÈå¢Ôºå‰ΩÜ‰∏¶Ê≤íÊúâÂëäË®¥ÊàëÂÄëÊòØÂ¶Ç‰Ωï‰ΩøÁî®ÔºõÊâÄ‰ª•ROICÂâáÊòØËß£Ê±∫‰∫ÜÈÄôÂÄãÂïèÈ°åÔºåÊàëÂÄëÈÄöÂ∏∏ÊúÉÂ∏åÊúõÂÖ¨Âè∏ÊàêÈï∑Ê≤íÈåØÔºå‰ΩÜÊõ¥Â∏åÊúõÂÆÉÊòØ‰æÜËá™Êú¨Ê•≠ÁöÑÊàêÈï∑ÔºåËÄåÈùûÊ•≠Â§ñÊàñÊòØÂÖ∂‰ªñËΩâÊäïË≥áÂ∞éËá¥„ÄÇ"
        >
          ROIC
        </Tooltip>
      ),
      dataIndex: "roic",
      width: 100,
      sorter: (a, b) => a.roic - b.roic,
      render: (value) =>
        value > 0 ? (
          value > 5 ? (
            <span style={{ color: "green" }}>{value}%</span>
          ) : (
            <span>{value}%</span>
          )
        ) : (
          <span style={{ color: "red" }}>{value}</span>
        )
    },
    {
      title: "PEG(‰ªä/Êòé)",
      dataIndex: "TTM",
      align: "center",
      width: 160,
      sorter: (a, b) => a.thisRevenue - b.thisRevenue,
      render: (pe, row) =>
        pe > 0 &&
        row.thisRevenue > 0 &&
        row.forwardPe > 0 &&
        row.nextRevenue > 0 &&
        pe / row.thisRevenue < 2 &&
        row.forwardPe / row.nextRevenue < 2 ? (
          <span style={{ backgroundColor: "green", color: "white" }}>
            <Tooltip title="ÂèØ‰ª•Áî®‰ΩéÂÉπË≤∑Âà∞È´òÊàêÈï∑ËÇ°">
              <strong>
                {Math.round((pe / row.thisRevenue) * 10) / 10}ÂÄç /{" "}
                {Math.round((row.forwardPe / row.nextRevenue) * 10) / 10} ÂÄç
              </strong>
            </Tooltip>
          </span>
        ) : pe > 0 &&
          row.thisRevenue > 0 &&
          row.forwardPe > 0 &&
          row.nextRevenue > 0 ? (
          <span style={{ color: "green" }}>
            {Math.round((pe / row.thisRevenue) * 10) / 10}ÂÄç /{" "}
            {Math.round((row.forwardPe / row.nextRevenue) * 10) / 10} ÂÄç
          </span>
        ) : pe > 0 && row.thisRevenue > 0 ? (
          <span style={{ color: "green" }}>
            {Math.round((pe / row.thisRevenue) * 10) / 10}% /
          </span>
        ) : (
          <span></span>
        )
    },
    {
      title: "Ê•≠Á∏æÂ¢ûÈï∑(‰ªä/Êòé)",
      dataIndex: "thisRevenue",
      align: "center",
      width: 160,
      sorter: (a, b) => a.thisRevenue - b.thisRevenue,
      render: (ratio, row) =>
        ratio >= 30 && row.nextRevenue >= 30 ? (
          <span style={{ color: "green" }}>
            <strong>
              {ratio}/{row.nextRevenue}%
            </strong>
          </span>
        ) : ratio >= 30 && row.nextRevenue < 0 ? (
          <span>
            <span style={{ color: "green" }}>
              <strong>{ratio}/</strong>
            </span>
            <span style={{ color: "red" }}>{row.nextRevenue}%</span>
          </span>
        ) : ratio >= 30 ? (
          <span>
            <span style={{ color: "green" }}>
              <strong>{ratio}/</strong>
            </span>
            <span>{row.nextRevenue}%</span>
          </span>
        ) : ratio < -20 && row.nextRevenue < 0 ? (
          <span style={{ color: "red" }}>
            {ratio}/{row.nextRevenue}%
          </span>
        ) : ratio < -20 && row.nextRevenue > 30 ? (
          <span>
            <span style={{ color: "red" }}>{ratio}/</span>
            <span style={{ color: "green" }}>
              <strong>{row.nextRevenue}%</strong>
            </span>
          </span>
        ) : ratio < -20 ? (
          <span>
            <span style={{ color: "red" }}>{ratio}/</span>
            <span>{row.nextRevenue}%</span>
          </span>
        ) : (
          <span>
            {ratio}/{row.nextRevenue}%
          </span>
        )
    },
    {
      title: "Âà©ÊΩ§Â¢ûÈï∑(‰ªä/Êòé)",
      dataIndex: "thisEPS",
      width: 160,
      align: "center",
      sorter: (a, b) => a.thisEPS - b.thisEPS,
      render: (ratio, row) =>
        ratio >= 50 && row.nextEPS >= 50 ? (
          <span style={{ color: "green" }}>
            <strong>
              {ratio}/{row.nextEPS}%
            </strong>
          </span>
        ) : ratio >= 50 && row.nextEPS < 0 ? (
          <span>
            <span style={{ color: "green" }}>
              <strong>{ratio}/</strong>
            </span>
            <span style={{ color: "red" }}>{row.nextEPS}%</span>
          </span>
        ) : ratio >= 50 ? (
          <span>
            <span style={{ color: "green" }}>
              <strong>{ratio}/</strong>
            </span>
            <span>{row.nextEPS}%</span>
          </span>
        ) : ratio < -50 && row.nextEPS < 0 ? (
          <span style={{ color: "red" }}>
            {ratio}/{row.nextEPS}%
          </span>
        ) : ratio < -50 && row.nextEPS > 50 ? (
          <span>
            <span style={{ color: "red" }}>{ratio}/</span>
            <span style={{ color: "green" }}>
              <strong>{row.nextEPS}%</strong>
            </span>
          </span>
        ) : ratio < -50 ? (
          <span>
            <span style={{ color: "red" }}>{ratio}/</span>
            <span>{row.nextEPS}%</span>
          </span>
        ) : (
          <span>
            {ratio}/{row.nextEPS}%
          </span>
        )
    },
    {
      title: "Êú™‰æÜÊ•≠Á∏æ",
      dataIndex: "next5Year",
      width: 80,
      sorter: (a, b) => a.next5Year - b.next5Year,
      render: (ratio) =>
        !ratio ? (
          <span></span>
        ) : ratio > 20 ? (
          <span style={{ color: "red" }}>
            <strong>{ratio}%</strong>
          </span>
        ) : ratio < -10 ? (
          <span style={{ color: "green" }}>
            <strong>{ratio}%</strong>
          </span>
        ) : (
          <span>{ratio}%</span>
        )
    },
    {
      title: "ÂàÜÊûêÂ∏´Ë©ïÂÉπ",
      dataIndex: "analysis",
      width: 250,
      render: (str) =>
        str.match(/‰ΩéÊñº/) ? (
          <span style={{ color: "green" }}>{str}</span>
        ) : str.match(/È´òÊñº/) ? (
          <span style={{ color: "red" }}>{str}</span>
        ) : (
          <span>{str}</span>
        )
    },
    {
      title: "ÈóúÊ≥®Â∫¶",
      dataIndex: "analystPopularity",
      width: 80,
      sorter: (a, b) => a.analystPopularity - b.analystPopularity
    },
    {
      title: "ÂàÜÊûêÂ∏´EPSÈ†êÊúü",
      dataIndex: "epsNote",
      width: 230
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="Ë≤°ÂãôÊåáÊ®ôÁÇ∫ F-Score ÂàÜÊï∏ÔºåÊòØËäùÂä†Âì•Â§ßÂ≠∏ÁöÑÊïôÊéà Joseph Piotroski Âú®„ÄåÂæûÊ≠∑Âè≤Ë≤°Â†±‰∏≠ÂàÜËæ®Âá∫Ë¥èÂÆ∂ÂèäËº∏ÂÆ∂„Äç‰∏≠ÔºåÊâÄÊèêÂá∫ÁöÑÊåáÊ®ôÔºåÂàÜÊï∏ 0~9 ÂàÜÔºåÂàÜÊï∏Ë∂äÈ´ò‰ª£Ë°®ÂÖ¨Âè∏Ë≤°ÂãôË°®ÁèæË∂äÂ•Ω„ÄÇ"
        >
          Ë≤°ÂãôÊåáÊ®ô
        </Tooltip>
      ),
      dataIndex: "fscore",
      width: 90,
      sorter: (a, b) => a.fscore - b.fscore,
      render: (fscore) =>
        fscore <= 3 ? (
          <span style={{ color: "red" }}>{fscore}</span>
        ) : fscore >= 7 ? (
          <span style={{ color: "green" }}>{fscore}</span>
        ) : (
          <span style={{ color: "orange" }}>{fscore}</span>
        )
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="ÊìçÁ∏±ÂàÜÊï∏ÊòØ M-ScoreÔºåÁî±Messod D. Beneish Âú® 1999 Âπ¥ÊèêÂá∫ÔºåÂÆÉÈÄöÈÅéË≤°ÂãôÊØîÁéáÔºåÂ∞çË≤°ÂãôÁöÑÂêàÁêÜÁ®ãÂ∫¶ÊâìÂàÜÔºå‰∏ªË¶ÅÁî®ÊñºÂà§Êñ∑Ë≤°ÂãôÂ†±Ë°®È¢®Èö™„ÄÇ
          M ÂÄºË∂äÈ´òÔºåÂâá‰∏ÄÂÆ∂ÂÖ¨Âè∏Ë≤°ÂãôÊìçÁ∏±ÁöÑÂèØËÉΩÊÄßË∂äÂ§ßÔºåM Ôºú -2.22ÊôÇÁÇ∫ÂÆâÂÖ®ÔºåÂ¶ÇÊûú -2.22 ‚â§ M Ôºú-1.78 ‰πãÈñìÔºåË≠âÊòéÊúâ‰∏ÄÂÆöÈ¢®Èö™ÔºåËÄåÂ¶ÇÊûú M ‚â• -1.78ÔºåÂâáÂÖ¨Âè∏ÈÄ†ÂÅáÈ¢®Èö™È´ò„ÄÇ"
        >
          ÊìçÁ∏±ÊåáÊ®ô
        </Tooltip>
      ),
      dataIndex: "mscore",
      width: 90,
      sorter: (a, b) => a.mscore - b.mscore,
      render: (mscore) =>
        mscore === 0 ? (
          <span></span>
        ) : mscore <= -2.22 ? (
          <span style={{ color: "green" }}>{mscore}</span>
        ) : mscore >= -1.78 ? (
          <span style={{ color: "red" }}>{mscore}</span>
        ) : (
          <span style={{ color: "orange" }}>{mscore}</span>
        )
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="Á†¥Áî¢ÊåáÊ®ôÁÇ∫ Z-ScoreÔºåÁî± Edward Altman Âú® 1968 Âπ¥ÁôºË°®ÔºåÈÄöÈÅéÂ∞çÁæéÂúãÁ†¥Áî¢ÂíåÈùûÁ†¥Áî¢ÁîüÁî¢Âûã‰ºÅÊ•≠ÈÄ≤Ë°åËßÄÂØüÂª∫Á´ã‰∫Ü 5 ËÆäÈáè Z-Score Ê®°Âûã„ÄÇÂ¶ÇÊûúÊåáÊ®ôÂ§ßÊñº 2.99 ÂâáÁÇ∫ÂÆâÂÖ®Ôºå1.8 ‚â¶ Z Ôºú 2.99 Êúâ‰∏ÄÂÆöÈ¢®Èö™ÔºåZ Ôºú 1.8 ÂâáÊúâÂèØËÉΩÁ†¥Áî¢„ÄÇ"
        >
          Á†¥Áî¢ÊåáÊ®ô
        </Tooltip>
      ),
      dataIndex: "zscore",
      width: 90,
      sorter: (a, b) => a.zscore - b.zscore,
      render: (zscore) =>
        zscore <= 1.81 ? (
          <span style={{ color: "red" }}>{zscore}</span>
        ) : zscore >= 2.99 ? (
          <span style={{ color: "green" }}>{zscore}</span>
        ) : (
          <span style={{ color: "orange" }}>{zscore}</span>
        )
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="ÊåâÁÖß‰∏çÂêåÁöÑ‰º∞ÂÄºÊñπÂºèÊâÄË©¶ÁÆóÁöÑ‰ºÅÊ•≠ÂêàÁêÜËÇ°ÂÉπ"
        >
          ÊûóÂ•á‰º∞ÂÄº
        </Tooltip>
      ),
      dataIndex: "lynchvalue",
      width: 90,
      sorter: (a, b) => a.lynchvalue - b.lynchvalue,
      render: (value, row) =>
        !value ? (
          <span></span>
        ) : value >= row.price ? (
          <span style={{ color: "green" }}>
            <strong>{value}</strong>
          </span>
        ) : (
          <span>{value}</span>
        )
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="ÊåâÁÖß‰∏çÂêåÁöÑ‰º∞ÂÄºÊñπÂºèÊâÄË©¶ÁÆóÁöÑ‰ºÅÊ•≠ÂêàÁêÜËÇ°ÂÉπ"
        >
          ËëõÊãâÊº¢‰º∞ÂÄº
        </Tooltip>
      ),
      dataIndex: "grahamnumber",
      width: 100,
      sorter: (a, b) => a.grahamnumber - b.grahamnumber,
      render: (value, row) =>
        !value ? (
          <span></span>
        ) : value >= row.price ? (
          <span style={{ color: "green" }}>
            <strong>{value}</strong>
          </span>
        ) : (
          <span>{value}</span>
        )
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="ÊåâÁÖß‰∏çÂêåÁöÑ‰º∞ÂÄºÊñπÂºèÊâÄË©¶ÁÆóÁöÑ‰ºÅÊ•≠ÂêàÁêÜËÇ°ÂÉπ"
        >
          DCF‰º∞ÂÄº
        </Tooltip>
      ),
      dataIndex: "iv_dcf",
      width: 90,
      sorter: (a, b) => a.iv_dcf - b.iv_dcf,
      render: (value, row) =>
        !value ? (
          <span></span>
        ) : value >= row.price ? (
          <span style={{ color: "green" }}>
            <strong>{value}</strong>
          </span>
        ) : (
          <span>{value}</span>
        )
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="ÊåâÁÖß‰∏çÂêåÁöÑ‰º∞ÂÄºÊñπÂºèÊâÄË©¶ÁÆóÁöÑ‰ºÅÊ•≠ÂêàÁêÜËÇ°ÂÉπ"
        >
          FCF‰º∞ÂÄº
        </Tooltip>
      ),
      dataIndex: "iv_dcf_share",
      width: 90,
      sorter: (a, b) => a.iv_dcf_share - b.iv_dcf_share,
      render: (value, row) =>
        !value ? (
          <span></span>
        ) : value >= row.price ? (
          <span style={{ color: "green" }}>
            <strong>{value}</strong>
          </span>
        ) : (
          <span>{value}</span>
        )
    },
    {
      title: (
        <Tooltip
          placement="bottomRight"
          title="ÊåâÁÖß‰∏çÂêåÁöÑ‰º∞ÂÄºÊñπÂºèÊâÄË©¶ÁÆóÁöÑ‰ºÅÊ•≠ÂêàÁêÜËÇ°ÂÉπ"
        >
          PSÂõûÊ≠∏‰º∞ÂÄº
        </Tooltip>
      ),
      dataIndex: "medpsvalue",
      width: 100,
      sorter: (a, b) => a.medpsvalue - b.medpsvalue,
      render: (value, row) =>
        !value ? (
          <span></span>
        ) : value >= row.price ? (
          <span style={{ color: "green" }}>
            <strong>{value}</strong>
          </span>
        ) : (
          <span>{value}</span>
        )
    },
    {
      title: "ÂèÉËÄÉË≥áÊñô",
      dataIndex: "symbol",
      width: 85,
      render: (symbol) => (
        <>
          <a
            href={
              "https://finance.yahoo.com/quote/" +
              symbol +
              "/analysis?p=" +
              symbol
            }
            target="_blank"
            rel="noopener noreferrer"
          >
            <Tooltip title="ÂâçÂæÄ Yahoo Finance Á∂≤Á´ôÊü•Èñ±È†êÊúüÊàêÈï∑Ë≥áË®ä">
              Yahoo
            </Tooltip>
          </a>
          <br />
          <a
            href={
              "https://www.gurufocus.com/stock/" +
              symbol +
              "/summary?search=" +
              symbol
            }
            target="_blank"
            rel="noopener noreferrer"
          >
            <Tooltip title="ÂâçÂæÄ gurufocus Á∂≤Á´ôÊü•Èñ±Ë≤°ÂãôÂàÜÊûêÊï∏Â≠ó">guru</Tooltip>
          </a>
        </>
      )
    }
  ];

  function onChange(pagination, filters, sorter, extra) {
    console.log("params", pagination, filters, sorter, extra);
  }

  const { list_type } = useParams();
  const stockListState = useStockListState(module_type, list_type);
  const error =
    stockListState.error === null ? null : stockListState.error ===
      "No Data" ? (
      <NoData />
    ) : (
      <NotFound />
    );
  const loading =
    stockListState.loading || !stockListState.data ? <Spin /> : null;
  return (
    <>
      <SiteSider type={module_type} />
      <Layout style={{ padding: "0 24px 24px" }}>
        <SiteBreadcrumb />
        {error ? (
          error
        ) : loading ? (
          loading
        ) : (
          <Content
            className="site-layout-background"
            style={{
              padding: 24,
              margin: 0,
              minHeight: 900
            }}
          >
            <Table
              columns={columns}
              dataSource={stockListState.data}
              onChange={onChange}
              scroll={{ x: 1500 }}
              pagination={{ pageSize: 100, hideOnSinglePage: true }}
            />
          </Content>
        )}
      </Layout>
    </>
  );
};

export default StockListPage;
